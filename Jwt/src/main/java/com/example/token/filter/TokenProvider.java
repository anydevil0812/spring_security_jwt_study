package com.example.token.filter;

import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.stream.Collectors;

@Component
public class TokenProvider implements InitializingBean {

   private final Logger logger = LoggerFactory.getLogger(TokenProvider.class);
   private static final String AUTHORITIES_KEY = "auth";
   private final String secret;
   private final long tokenValidityInMilliseconds;
   private Key key;

   public TokenProvider(@Value("${jwt.secret}") String secret, @Value("${jwt.token-valid-time}") long tokenValidTime) {
      this.secret = secret;
      this.tokenValidityInMilliseconds = tokenValidTime * 1000;
   }

   @Override
   public void afterPropertiesSet() {
      byte[] keyBytes = Decoders.BASE64.decode(secret);
      this.key = Keys.hmacShaKeyFor(keyBytes); // Keys.hmacShaKeyFor() = 환경설정에 있는 비밀키 문자열을 byte[]로 전달하며 SecretKey 인스턴스 생성
   }
   
   // 토큰 생성
   public String createToken(Authentication authentication) {
      String authorities = authentication.getAuthorities().stream()
         .map(GrantedAuthority::getAuthority)
         .collect(Collectors.joining(","));

      long now = (new Date()).getTime();
      Date validity = new Date(now + this.tokenValidityInMilliseconds);

      return Jwts.builder()
         .setSubject(authentication.getName()) // 토큰 제목 설정
         .claim(AUTHORITIES_KEY, authorities) // payload에 담을 claim(key:value 데이터) 설정
         .signWith(key, SignatureAlgorithm.HS512) // 사용할 암호화 알고리즘(HS256) 및 signature에 들어갈 secret key 설정
         .setExpiration(validity) // 유효기간 설정
         .compact(); 
   }
   
   // builder = jwt 생성(인코딩), parserBuilder = jwt 검증(디코딩)
   public Authentication getAuthentication(String token) {
      Claims claims = Jwts
              .parserBuilder() // JwtParseBuilder 인스턴스 생성
              .setSigningKey(key) // 검증을 위한 key 지정
              .build() // jwtParser 반환
              .parseClaimsJws(token) // 토큰을 Jws로 파싱
              .getBody(); // 토큰에 저장했던 data들이 담긴 Claims 반환 

      Collection<? extends GrantedAuthority> authorities =
         Arrays.stream(claims.get(AUTHORITIES_KEY).toString().split(","))
            .map(SimpleGrantedAuthority::new)
            .collect(Collectors.toList());

      User principal = new User(claims.getSubject(), "", authorities);
      
      //  UsernamePasswordAuthenticationToken = Authentication 인터페이스의 구현체 (Authentication 객체의 일종)
      return new UsernamePasswordAuthenticationToken(principal, token, authorities); // token이 credentials(Password로 들어감)
   }
   
   // 토큰 검증
   public boolean validateToken(String token) {
      try {
         Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);
         return true;
      } catch (io.jsonwebtoken.security.SecurityException | MalformedJwtException e) {
         logger.info("잘못된 JWT 서명입니다.");
      } catch (ExpiredJwtException e) {
         logger.info("만료된 JWT 토큰입니다.");
      } catch (UnsupportedJwtException e) {
         logger.info("지원되지 않는 JWT 토큰입니다.");
      } catch (IllegalArgumentException e) {
         logger.info("JWT 토큰이 잘못되었습니다.");
      }
      return false;
   }
}
